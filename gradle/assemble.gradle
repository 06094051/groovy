import org.apache.tools.ant.filters.ReplaceTokens
import java.text.SimpleDateFormat

apply plugin: 'osgi'

group = 'org.codehaus.groovy'
archivesBaseName = 'groovy'

ext.allManifest = manifest {
    attributes("Built-By": System.properties['user.name'],
            "Extension-Name": 'groovy',
            "Specification-Title": 'Groovy: a powerful, dynamic language for the JVM',
            "Specification-Version": project.version,
            "Specification-Vendor": 'The Codehaus',
            "Implementation-Title": 'Groovy: a powerful, dynamic language for the JVM',
            "Implementation-Version": project.version,
            "Implementation-Vendor": 'The Codehaus',
            "Bundle-ManifestVersion": '2',
            "Bundle-Name": 'Groovy Runtime',
            "Bundle-Description": 'Groovy Runtime',
            "Bundle-Version": groovyBundleVersion,
            "Bundle-Vendor": 'The Codehaus',
            "Bundle-ClassPath": '.',
            "Bundle-RequiredExecutionEnvironment": 'J2SE-1.5',
            "Eclipse-BuddyPolicy": 'dependent',
            "Eclipse-LazyStart": 'true',
            "DynamicImport-Package": '*',
            "Main-class": 'groovy.ui.GroovyMain')
}

ext.licenseSpec = copySpec {
    from "$projectDir/config/build"
    from(zipTree(configurations.compile.fileCollection { it.name.startsWith 'commons-cli' }.singleFile).matching {
        include 'META-INF/LICENSE.txt'
    }) {
        eachFile {details ->
            details.path = details.path - 'META-INF'
            details.name = "CLI-LICENSE.txt"
        }
    }
}

ext.binaryJarsMetaInf = {
    Date buildTime = new Date()
    from "$projectDir/LICENSE.txt"
    from("$projectDir/src/main/META-INF/groovy-release-info.properties") {
        filter {String line ->
            ['##ImplementationVersion##': project.version, '##BundleVersion##': project.groovyBundleVersion,
                    '##BuildDate##': new SimpleDateFormat('dd-MMM-yyyy').format(buildTime),
                    '##BuildTime##': new SimpleDateFormat('hh:mm aa').format(buildTime)].each {key, value ->
                line = line.replace(key, value)
            }
            line
        }
    }
}

task copy(type: Copy) {
    into "$buildDir/meta"
    with licenseSpec
}

ext.commonOsgiManifest = {
    // We exclude the Bnd-LastModified attribute as it always triggers a rebuild without being really needed.
    from(allManifest) {
        eachEntry {details ->
            if (details.key == 'Bnd-LastModified') {
                details.exclude()
            }
        }
    }
    version = groovyBundleVersion
    instruction '-nouses', 'true'
    instruction 'Export-Package', "*;version=${version}"
    classpath = sourceSets.main.runtimeClasspath
}

jar {
    dependsOn('dgmConverter')
    metaInf binaryJarsMetaInf
    manifest = osgiManifest {
        symbolicName = 'groovy'
        instruction 'Import-Package', "antlr", "org.objectweb.asm", "*;resolution:=optional"
        classesDir = sourceSets.main.output.classesDir
    }
    manifest commonOsgiManifest
    exclude '**/package-info.class'
}

task jarAll(type: Jar, dependsOn: jar) {
    ext.metaInfDir = "$buildDir/tmp/groovy-all-metainf"
    inputs.files jar.archivePath
    inputs.dir metaInfDir
    appendix = 'all'
    doLast {
        manifest.writeTo("$metaInfDir/MANIFEST.MF")
        copy {
            into "$buildDir/tmp/groovy-all-metainf"
            with licenseSpec
        }
        project.ant {
            taskdef name: "jarjar", classname: "com.tonicsystems.jarjar.JarJarTask", classpath: configurations.tools.asPath
            jarjar(jarfile: archivePath, manifest: "$metaInfDir/MANIFEST.MF") {
                zipfileset(dir: "$metaInfDir", prefix: 'META-INF')
                zipfileset(src: jar.archivePath)
                configurations.runtime.files.findAll {file ->
                    ['antlr', 'asm', 'commons-cli'].any { file.name.startsWith(it) } && ['asm-attr', 'asm-util', 'asm-analysis'].every { !file.name.startsWith(it) }
                }.each {jarjarFile ->
                    zipfileset(src: jarjarFile)
                }
                zipfileset(src: configurations.runtime.files.find { file -> file.name.startsWith('asm-util') },
                    includes: 'org/objectweb/asm/util/AbstractVisitor.class,org/objectweb/asm/util/Trace*')
                rule pattern: "antlr.**", result: "groovyjarjarantlr.@1"
                rule pattern: "org.objectweb.**", result: "groovyjarjarasm.@1"
                rule pattern: "org.apache.commons.cli.**", result: "groovyjarjarcommonscli.@1"
            }
        }
    }
    // We exclude the Bnd-LastModified attribute as it always triggers a rebuild without being really needed.
    manifest = osgiManifest {
        symbolicName = 'groovy-all'
        instruction 'Import-Package', "*;resolution:=optional"
        classesDir = jar.archivePath
    }
    manifest commonOsgiManifest
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    //    from sourceSets.main.allSource
    from "$projectDir/src/main"
}

task sourceAllJar(type: Jar, dependsOn: sourceJar) {
    appendix = 'all'
    classifier = 'sources'
    with sourceJar.rootSpec
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task javadocAllJar(type: Jar, dependsOn: javadocJar) {
    appendix = 'all'
    classifier = 'javadoc'
    with javadocJar.rootSpec
}


ext.distSpec = copySpec {
    from("$projectDir") {
        include "LICENSE.txt", "NOTICE.txt"
    }
    into("lib") {
        from configurations.runtime.fileCollection {dep ->
            System.err.println dep.dump()
//            !(dep instanceof FileCollectionDependency) && !dep.name.startsWith('livetribe')
        }, jar.archivePath
    }
    into("conf") {
        from "src/conf"
    }
    into("bin") {
        from("src/bin") {
            filter(ReplaceTokens, tokens: [GROOVYJAR:jar.archiveName])
            fileMode = 0755
            ext.exclude = "groovy.icns"
        }
        from("src/bin/groovy.icns")
        from("src/tools/org/codehaus/groovy/tools/groovy.ico")
    }
    into("embeddable") {
        from jarAll.archivePath
    }
}

task installGroovy(type: Sync, dependsOn: [jar, jarAll]) {
    from distSpec
    into System.properties.installDirectory ?: "$buildDir/install"
}

//task jars(dependsOn: tasks.withType(Jar))
//task dists(dependsOn: tasks.withType(Zip).matching {task -> !(task instanceof Jar)})

task distBin(type: Zip, dependsOn: [jar, jarAll]) {
    appendix = 'binary'
    into("groovy-$version") {
        with distSpec
        with licenseSpec
    }
}

task distDoc(type: Zip, dependsOn: doc) {
    appendix = 'docs'
    into("groovy-$version")
    into("pdf") {
        from 'src/wiki-snapshot.pdf'
    }
    into("html/api") {
        from javadoc.destinationDir
    }
    into("html/gapi") {
        from groovydoc.destinationDir
    }
    into("html/groovy-jdk") {
        from docGDK.destinationDir
    }
}

task distSrc(type: Zip, dependsOn: [javadoc, groovydoc, docGDK]) {
    appendix = 'src'
    into("groovy-$version")
    from(projectDir) {
        exclude 'target', buildDir.path, 'classes/**', 'cruise/**', '.clover/*', 'local.build.properties',
                'cobertura.ser', 'junitvmwatcher*.properties'
    }
}
